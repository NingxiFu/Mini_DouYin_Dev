// Code generated by hertz generator.

package api

import (
	"Mini_DouYin/cmd/api/biz/rpc"
	"Mini_DouYin/kitex_gen/user"
	"context"

	api "Mini_DouYin/cmd/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserRegister .
// @router /douyin/user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RegisterResp)
	rgResp, err := rpc.Register(ctx, &user.RegisterReq{
		Username: req.Username,
		Password: req.Password,
	})

	if err != nil {
		resp.StatusCode = consts.StatusInternalServerError
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	if rgResp.Base.Code != consts.StatusOK {
		resp.StatusCode = rgResp.Base.Code
		resp.StatusMsg = rgResp.Base.Errmsg
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.UserID = rgResp.UserID
	resp.Token = rgResp.Token
	resp.StatusMsg = "ok"
	resp.StatusCode = consts.StatusOK

	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /douyin/user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.LoginResp)
	lgResp, err := rpc.Login(ctx, &user.LoginReq{
		Username: req.Username,
		Password: req.Password,
	})

	if err != nil {
		resp.StatusCode = consts.StatusInternalServerError
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	if lgResp.Base.Code != consts.StatusOK {
		resp.StatusCode = lgResp.Base.Code
		resp.StatusMsg = lgResp.Base.Errmsg
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.UserID = lgResp.UserID
	resp.Token = lgResp.Token

	c.JSON(consts.StatusOK, resp)
}

// GetUserInfo .
// @router /douyin/user/ [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserInfoResp)
	resp.User = new(api.User)
	infoResp, err := rpc.GetUserInfo(ctx, &user.UserInfoReq{
		UserID: req.UserID,
		Token:  req.Token,
	})

	if err != nil {
		resp.StatusCode = consts.StatusInternalServerError
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	if infoResp.Base.Code != consts.StatusOK {
		resp.StatusCode = infoResp.Base.Code
		resp.StatusMsg = infoResp.Base.Errmsg
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.User.ID = infoResp.User.Id
	resp.User.Name = infoResp.User.Name
	resp.User.FollowCount = infoResp.User.FollowCount
	resp.User.FollowerCount = infoResp.User.FollowerCount
	resp.User.IsFollow = true
	c.JSON(consts.StatusOK, resp)
}
